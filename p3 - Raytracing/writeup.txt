Implemented all basic functions
+ Implement the Raytracer class as defined by the spec to raytrace scenes.
+ Write intersection tests for all types of geometric objects in the scene.
+ Properly handle arbitrary scaling, rotation, and translation of geometries.
+ Implement the basic ray tracing algorithm by sending rays from the eye through all objects in the scene, up to a recursion depth of at least 3.
+ Add direct illumination and shadows by sending rays to point lights.
+ Add specular reections by sending reected rays into the scene.
+ Add refractions by sending transmission rays through dielectric materials.
+ Compute colors as specified in section 12.
+ Sample spherical light sources correctly to generate soft shadows.
+ Correctly render the scenes in the scenes directory.

Right now, I'm using 10 monte carlo samples for shadow ray and 5 recursive light for reflection and refraction.
You can change this value in raytracer.hpp
#define MONTE_CARLO_SAMPLES 10
#define RECURSIVE_LIGHT 5

I also implemented this extra
+ Bounding Box for all geometries
+ Hierarchical data structure
	I implemented KD Trees for Model geometry
	to build a tree, start from root which contains all the triangles of model and bounding box surrounding a whole thing.
	at each level down the trees, I split the tree depends on the longest axis. Here the order of the process
	1. Find middle point of all the triangles in node
	2. Find the longest axis of the bounding box for that node.
	3. For each triangle in the node, check whether, for the current axis, it is less than or greater than the overall midpoint
		– if less than, push the triangle to the left child
		– if greater than, push the triangle to the right child
	4. They will stop the recursion if the node cannot split to be smaller (e.g. contain 1 triangle) or if the depth of the tree has reached certain number
		right now, I limited the depth of the tree by 50. You can change the value in meshtree.hpp
		#define MAX_TREE_DEPTH 50
+ Depth of field
	to activate use additional parameter
	./p3 scene_name -f focal_length aperture_size total_ray
	for example: ./p3 scenes/cube.scene -f 12 0.4 2
	cube_depth_of_field.jpg is screenshot from that input
+ Glossy Reflection
	to active use additional parameter
	./p3 scene_name -g glossy_width
	for example: ./p3 scenes/spheres.scene -g 0.1
	spheres_glossy.jpg is screen shot from that input
+ Add animation scale in and scale out to sphere
	to activate change code directly (hard code)
	in application.hpp inside struct Options, there is one variable 
	"const static bool is_animating = false;"
	if you change the value to "true" and open scene that has sphere (e.g. test.scene), the sphere will animate